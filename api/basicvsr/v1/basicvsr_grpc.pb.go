// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: basicvsr/v1/basicvsr.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BasicVSR_GetStatus_FullMethodName    = "/basicvsr.v1.BasicVSR/GetStatus"
	BasicVSR_ExecBasicVsr_FullMethodName = "/basicvsr.v1.BasicVSR/ExecBasicVsr"
)

// BasicVSRClient is the client API for BasicVSR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicVSRClient interface {
	// Sends a greeting
	GetStatus(ctx context.Context, in *GPURequest, opts ...grpc.CallOption) (*GPUReply, error)
	ExecBasicVsr(ctx context.Context, in *GPURequest, opts ...grpc.CallOption) (*ExecReply, error)
}

type basicVSRClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicVSRClient(cc grpc.ClientConnInterface) BasicVSRClient {
	return &basicVSRClient{cc}
}

func (c *basicVSRClient) GetStatus(ctx context.Context, in *GPURequest, opts ...grpc.CallOption) (*GPUReply, error) {
	out := new(GPUReply)
	err := c.cc.Invoke(ctx, BasicVSR_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicVSRClient) ExecBasicVsr(ctx context.Context, in *GPURequest, opts ...grpc.CallOption) (*ExecReply, error) {
	out := new(ExecReply)
	err := c.cc.Invoke(ctx, BasicVSR_ExecBasicVsr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicVSRServer is the server API for BasicVSR service.
// All implementations must embed UnimplementedBasicVSRServer
// for forward compatibility
type BasicVSRServer interface {
	// Sends a greeting
	GetStatus(context.Context, *GPURequest) (*GPUReply, error)
	ExecBasicVsr(context.Context, *GPURequest) (*ExecReply, error)
	mustEmbedUnimplementedBasicVSRServer()
}

// UnimplementedBasicVSRServer must be embedded to have forward compatible implementations.
type UnimplementedBasicVSRServer struct {
}

func (UnimplementedBasicVSRServer) GetStatus(context.Context, *GPURequest) (*GPUReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedBasicVSRServer) ExecBasicVsr(context.Context, *GPURequest) (*ExecReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecBasicVsr not implemented")
}
func (UnimplementedBasicVSRServer) mustEmbedUnimplementedBasicVSRServer() {}

// UnsafeBasicVSRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicVSRServer will
// result in compilation errors.
type UnsafeBasicVSRServer interface {
	mustEmbedUnimplementedBasicVSRServer()
}

func RegisterBasicVSRServer(s grpc.ServiceRegistrar, srv BasicVSRServer) {
	s.RegisterService(&BasicVSR_ServiceDesc, srv)
}

func _BasicVSR_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicVSRServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicVSR_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicVSRServer).GetStatus(ctx, req.(*GPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicVSR_ExecBasicVsr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicVSRServer).ExecBasicVsr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicVSR_ExecBasicVsr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicVSRServer).ExecBasicVsr(ctx, req.(*GPURequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicVSR_ServiceDesc is the grpc.ServiceDesc for BasicVSR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicVSR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basicvsr.v1.BasicVSR",
	HandlerType: (*BasicVSRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _BasicVSR_GetStatus_Handler,
		},
		{
			MethodName: "ExecBasicVsr",
			Handler:    _BasicVSR_ExecBasicVsr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basicvsr/v1/basicvsr.proto",
}
